/* File             : zndCodaRecord.js
   Author           : Daniel S. A. Khan
   Copywrite        : Daniel S. A. Khan (c) 2022
   Notes            :
   Description      :
*/

/* ------------------     External Application Libraries      ----------------*/
const winston                           = require('winston')
/* ------------------ End External Application Libraries      ----------------*/

/* --------------- External Application Libraries Initialization -------------*/
/* ----------- End External Application Libraries Initialization -------------*/

/* ------------------     Internal Application Libraries      ----------------*/
const config                            = require('../services/configuration')
/* ------------------ End Internal Application Libraries      ----------------*/

/* ------------------------------------- Controllers -------------------------*/
/* -------------------------------- End Controllers --------------------------*/

/* ------------------------------------- Services ----------------------------*/
const Logger                            = require('../services/zndLoggerClass')
const zndMsg                            = require('../services/zndMsg');
/* -------------------------------- End Services -----------------------------*/

/* ------------------------------------- Models ------------------------------*/
const zanddLedger                       = require('../models/zanddLedger.js')
const codaRecordModel                   = require('../models/codaRecord')
/* -------------------------------- End Models -------------------------------*/

/* ---------------------------------  Application constants    ----------------*/
const logFileName                       = config.get('application:logFileName')
const applicationName                   = config.get('application:applicationName')
/* --------------------------------- End Application constants ----------------*/

/* --------------- Internal Application Libraries Initialization  -------------*/
const logger                            = new Logger(logFileName)
/* ----------- End Internal Application Libraries Initialization  -------------*/

/* ------------------------------------- Application Variables ----------------*/
var codaRecords=[]
var RECORDSCOUNT=0;
var transactions=[]
/* ---------------------------------End Application Variables  ----------------*/

/* ------------------------------------- Functions   --------------------------*/
function createCodaRecord(codarecord)
{   try
    {  codaRecords.push(codarecord)    	 
    	 if(codaRecords.length == RECORDSCOUNT)
    	 {   manageCodaRecords();
    	 }
    } 
    catch(ex)
    {   console.log('manageCodaRecords:createCodaRecord:ERR:An exception occurred:[' + ex +'].')
    }
}


function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/*

const zanddLedgerSchema = new Schema({
	bankDate: String, 													R2:1:valueDate,
	InvoiceDate: String, 												MANUAL ENTRY,
  grossAmount: String, 												R2:1: ,amount
  vat : String, 															MANUAL ENTRY,
  ledgerAccount: (grootbeokerekening),        MANUAL ENTRY,    
  BookingPeriode: 														MANUAL ENTRY,
  proofType: 																	MANUAL ENTRY,
  paymenttypes: 															'BANK',
  compagnyID: 																MANUAL ENTRY,
  billSpecification: 													CONCAT FIELDS,
  billDescription: 														MANUAL ENTRY,
  invoiceNumber: 			`												MANUAL ENTRY,
  bankAccountNumber: String,      						R2:3:counterpartAccountNR
  VATNumber: String,              						MANUAL ENTRY,
  zndAccountNumber: 													R1:accountNRCC
  Beneficiary: String,												'---'
  notes: String,                              MANUAL ENTRY,
  docScan: String															MANUAL ENTRY,
  bankRecord: String,													JSON structure all bank coda records related to transaction.
  bankID: String, 														Bankreference number transaction: R2:1
  customerReference:String
});
 
 billSpecification
 #Description                                 
 *bankdate                                    R2:1:valueDate,
 *bank time																		Nem Tudom	
 *compagny																		R2:3:	counterpartName
 *tegenrekening                               R2:3: counterpartAccountNR
 *teken                                       R2:1: movementSign 
 *Bedrag                                      R2:1:amount,
 *mededeling                                  R2:1:Communicationzone, R2:1:Communication, R2:3:Communication, R3:1: Communication, R3:2: Communication, R3:3:Communication 
 *Type                                        R2:1:communicationZone   
 *bewegingsdatum                              R2:1:entryDate,   
 *valuta datum                                R2:1:valueDate,   
 *uitrekselnummer    													R2:1:statementSequenceNumber	
 *transactienummer                            R2:1:BankReferenceNumber
 *info voor de opdrachtgever                  R2:1:Communicationzone, R2:1:Communication, R2:3:Communication, R3:1: Communication, R3:2: Communication, R3:3:Communication 
 adres tegenpartij                            R3:1: Communication, R3:2: Communication, R3:3:Communication 
 Historiek
 ondertekend

*/ 

var ledgerEntryCodaRecords=[]

function chunk(str, size) 
{    return str.match(new RegExp('.{1,' + size + '}', 'g'));
} 
  
  /*
const zanddLedgerSchema = new Schema({
	bankDate: String,
	invoiceDate: String,
  grossAmount: String,
  VAT : String,
  ledgerAccount: String,
  bookingPeriode: String,
  proofType: String,
  paymenttypes: String,
  compagnyID: String,
  billSpecification: String,
  billDescription: String,
  invoiceNumber: String,
  bankAccountNumber: String,
  VATNumber: String,
  zndAccountNumber: String,
  beneficiary: String,
  notes: String,
  docScan: String
});
  */
function createLedgerEntry(ledgerEntryCodaRecords)
{   var ledgerEntry={}
	  var bankReferentie=" - ", zndAccountNumber=" - ",bankDate=" - ", bankTime=" - ",teken=" - ",Bedrag=" - ",mededeling=" - ", compagny=" - ", tegenrekening=" - ", bewegingsDatum=" - ", Type=" - ", valutaDatum=" - ", uitrekselnummer=" - ", transactienummer=" - ", info=" - ", adresTegenpartij=" - ";
	  var i=0; 
	  var billSpecification=[];
	  try
    {  console.log('manageCodaRecords:createLedgerEntry:INFO:Creating Ledger Entry')
    	 for( i=0; i < ledgerEntryCodaRecords.length;i++)
	     {  //ledgerEntry.paymenttypes='BANK'
	     	  //ledgerEntry.Beneficiary='---'
	     	  if( ledgerEntryCodaRecords[i].recordID.includes('1') )
	     		{ zndAccountNumber=ledgerEntryCodaRecords[i].accountNRCC;
	     		}
	     	  if( ledgerEntryCodaRecords[i].recordID.includes('2') &&  ledgerEntryCodaRecords[i]. articleCode.includes('1') )
	     		{  bankDate=(ledgerEntryCodaRecords[i].valueDate !='' ? ledgerEntryCodaRecords[i].valueDate:' ')
	     			 bankTime=(' - ');
	     			 teken=(ledgerEntryCodaRecords[i].movementSign != ''?ledgerEntryCodaRecords[i].movementSign: ' - ');
	     			 amount=(ledgerEntryCodaRecords[i].amount!= ''? ledgerEntryCodaRecords[i].amount: ' - ');	     			 
	     			 bankReferentie =(ledgerEntryCodaRecords[i].transactionID!= ''? ledgerEntryCodaRecords[i].transactionID: ' - ');	     			 
	     			 
	     		} 	 
	     		if( ledgerEntryCodaRecords[i].recordID.includes('2') &&  ledgerEntryCodaRecords[i]. articleCode.includes('3'))
	     		{  //ledgerEntry.bankAccountNumber=ledgerEntryCodaRecords[i].counterpartAccountNR
	     			 
	     			 compagny=((ledgerEntryCodaRecords[i].counterpartName != '') || (ledgerEntryCodaRecords[i].counterpartName != undefined) ? ledgerEntryCodaRecords[i].counterpartName: ' - ');
	     			 
	     			 tegenrekening=((ledgerEntryCodaRecords[i].counterpartAccountNR!= '') || (ledgerEntryCodaRecords[i].counterpartAccountNR != undefined)?ledgerEntryCodaRecords[i].counterpartAccountNR: ' - ');
	     			 valueDate=(ledgerEntryCodaRecords[i].valueDate != ''?ledgerEntryCodaRecords[i].valueDate: ' - ');
	     			 entryDate=(ledgerEntryCodaRecords[i].entryDate != ''?ledgerEntryCodaRecords[i].entryDate : ' - ');
	     			 statementSequenceNumber=(ledgerEntryCodaRecords[i].statementSequenceNumber != ''?ledgerEntryCodaRecords[i].statementSequenceNumber: ' - ');
	     			 BankReferenceNumber=(ledgerEntryCodaRecords[i].BankReferenceNumber != ''?ledgerEntryCodaRecords[i].BankReferenceNumber: ' - ');
	     			 Communicationzone=(ledgerEntryCodaRecords[i].Communicationzone != ''?ledgerEntryCodaRecords[i].Communicationzone: ' - ');
	     			 Communicationzone2=(ledgerEntryCodaRecords[i].Communicationzone != ''?ledgerEntryCodaRecords[i].Communicationzone: ' - ');
	     		} 
	     		//ledgerEntry.billSpecification=bankDate+"\n"+bankTime+"\n"+compagny+"\n"+tegenrekening+"\n"+teken+"\n"+Bedrag+"\n"+ mededeling+"\n"+ Type+"\n"+ bewegingsDatum +"\n"+valutaDatum+"\n"+uitrekselnummer+"\n"+transactienummer+"\n"+info+"\n"+adresTegenpartij;
	     		//ledgerEntry.billSpecification=JSON.stringify(billSpecification)
          
       } 
       /* Clean up and sanitize
       	  Date needs to be from DDMMYY to dd-mm-yyy
       
       */
       /* InvoiceDate : Format: 'DD-MM-YYYY'
       */
       let chunks=chunk(bankDate,2)
       ledgerEntry.bankDate=chunks[0]+'-'+chunks[1]+'-20'+chunks[2]
       
       /* InvoiceDate : Format: 'DD-MM-YYYY' (Default value : bankDate)
       */
       ledgerEntry.invoiceDate=ledgerEntry.bankDate
       
       /* GrossAmount: Format: 'nnnnnnnnnnnn,nn'
       */
       grossAmount=String((parseFloat(amount)+1)/1000).replace(".", ",");;
       ledgerEntry.grossAmount=grossAmount.substring(0, grossAmount.length - 1);;
       
       
       /* vat: Format: 'nnnnnnnnnnnn,nn' (Default value : 999999999999,99)
       */
       ledgerEntry.VAT='999999999999,99';
       
       /* ledgerAccount Format: List (Default value : '--------------------------------------------')
       */       
       ledgerEntry.ledgerAccount='--------------------------------------------';
       
       /* BookingPeriod Format: 'Q1,Q2,Q3,Q4' 
       */
       let Quater=(Math.trunc(parseFloat(chunks[1])/4)+1)
       ledgerEntry.bookingPeriod='Q'+String(Quater);
       
       /* proofType  Format: List (Default value : '---')       
       */
       ledgerEntry.proofType='---'; 
       
       /* paymenttypes Format: List (Default value : 'BANK') 
       */
       ledgerEntry.paymentTypes='BANK'; 
       
       /*   compagnyID Format: List (Default value : 'UNKNOWN') 
       */
       ledgerEntry.compagnyID='UNKNOWN'; 
       
       /*   billSpecification Format: List (Default value : '---')   
       */
       ledgerEntry.billSpecification=String(bankDate)+String(",")+String(bankTime)+String(",")+String(compagny)+String(",")+String(tegenrekening)+String(",")+String(teken)+String(",")+String(Bedrag)+String(",")+String( mededeling)+String(",")+String( Type)+String(",")+String( bewegingsDatum )+String(",")+String(valutaDatum)+String(",")+String(uitrekselnummer)+String(",")+String(transactienummer)+String(",")+String(info)+String(",")+String(adresTegenpartij); 
       
       /*   billDescription Format: Manual Entree  (Default value : '----')     
       */
       ledgerEntry.billDescription='----'; 
       
       /*   invoiceNumber Format: Manual Entree (Default value : '-----')       
       */
       ledgerEntry.invoiceNumber='-----'; 
       
       /*   bankAccountNumber Format: 'AAAAAAAAAAAAAAAAAAAAA 
       */
       ledgerEntry.bankAccountNumber=tegenrekening; 
       
       /*   VATNumber Format: List (Default value : 'BEnnnnnnnnnnn' )           
       */
       ledgerEntry.VATNumber='BEnnnnnnnnnnnn' ;                                 
       
       /*   zndAccountNumber Format: 'AAAAAAAAAAAAAAAAAAAAA'   
       */
       ledgerEntry.zndAccountNumber=zndAccountNumber.substring(0,  zndAccountNumber.length - 21);;; 
       /*   Beneficiary Format: List (Default value : '------' )         
       */
       ledgerEntry.beneficiary='------' ; 
       
       /*   notes Format: Manual Entree (Default value : '--------')               
       */
       ledgerEntry.notes='--------'; 
       
       /*   docScan Format: Manual Entree (Default value : '.')
       */
       ledgerEntry.docScan='___NO BILL.pdf'; 
       
       ledgerEntry.bankRecord=JSON.stringify(ledgerEntryCodaRecords)
       ledgerEntry.bankstatementID=bankReferentie;
       
       console.log("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
       console.log(ledgerEntry)
       
       recordCreation = zanddLedger.create(ledgerEntry ,(error) => 
       {   if(error) 
       	   {   console.log('manageCodaRecords:getLedgerEntryCodaRecords:ERR:An error occurred creating ledger Entry:[' + error +'].') 		   	    
		   		} 	 
    	 });
    }	 
    catch(ex)
    {   console.log('manageCodaRecords:getLedgerEntryCodaRecords:ERR:An exception occurred:[' + ex +'].')
    }
}


function getLedgerEntryCodaRecords(transactionID)
{   var statementID=""
	  ledgerEntryCodaRecords=[]
	  try
    {  console.log('manageCodaRecords:getLedgerEntryCodaRecords:INFO:Getting codarecords for Ledger entree['+transactionID+'].')
    	 for(let i=0; i < codaRecords.length;i++)
	     {   record=JSON.parse(codaRecords[i].codaRecordJSON)
	     	   if(record.transactionID.includes(transactionID))
	     	   { //console.log(record)
	     	   	 ledgerEntryCodaRecords.push(record)
	     	   	 statementID=record.statementID;
	     	   }
	     }
	     for(let i=0; i < codaRecords.length;i++)
	     { record=JSON.parse(codaRecords[i].codaRecordJSON)
	     	 if(record.statementID.includes(statementID) && (record. recordID.includes('0') || record. recordID.includes('1') || record. recordID.includes('4') ||record. recordID.includes('8') ||record. recordID.includes('9') ))
	     	 { //console.log(record)
	     	 	 ledgerEntryCodaRecords.push(record)	     	 
	     	 }
	     }
	     console.log("//////////////////////////////////////////////////////////////////////////////////////////")
	     //console.log(ledgerEntryCodaRecords)
	     createLedgerEntry(ledgerEntryCodaRecords)
	    // statement=JSON.stringify(ledgerEntryCodaRecords)
	     //console.log(statement)
    } 
    catch(ex)
    {   console.log('manageCodaRecords:getLedgerEntryCodaRecords:ERR:An exception occurred:[' + ex +'].')
    }
}



async function  createLedgerFromCodaRecords()
{   var zanddLedgerStatements=[]
    var found=0;
    try
    {  console.log('manageCodaRecords:createLedgerFromCodaRecords:INFO:Creating LedgerEntree')
    	 for(let i=0;i<transactions.length;i++)
    	 { zanddLedgerStatements=await zanddLedger.find().distinct('bankstatementID')    	   
    	   for(let j=0;j<zanddLedgerStatements.length;j++)
    	   {  if (transactions[i].includes(zanddLedgerStatements[j])) found++
    	      
    	   }
    	   if ( found == 0 )
    	   {   console.log("Adding ["+ transactions[i]+"] to ledger.")
    	       getLedgerEntryCodaRecords(transactions[i]);
    	   } 
    	   found = 0; 
    	   
    	   zanddLedgerStatements=[]
    	 }
    	 
    } 
    catch(ex)
    {   console.log('manageCodaRecords:manageCodaRecordsInit:ERR:An exception occurred:[' + ex +'].')
    }
}

async function manageCodaRecords()
{   var record={}
	  var TransactionID;
	  try
    {   if(codaRecords.length == RECORDSCOUNT)
    	  {   for(let i=0; i < codaRecords.length;i++)
	          {  // console.log(codaRecords[i].codaRecordJSON);
	          	 //console.log(codaRecords[i]);
	          	 record=JSON.parse(codaRecords[i].codaRecordJSON)
	          	 if(record.recordID.includes('2'))
	          	 { TransactionID=record.transactionID;
	          	 	 if(!transactions.includes(TransactionID)) 
	          	 	 { 
	          	 	   transactions.push(TransactionID) ; 
	          	 	 } 
	          	 }
	          	 record={}
	          }
	          console.log(transactions)
	          let prata = await createLedgerFromCodaRecords();
    	 }
    	 else
    	 { console.log('manageCodaRecords:manageCodaRecords:ERR:An exception occurred:[' + codaRecords.length +'].')       
    	 }
    } 
    catch(ex)
    {   console.log('manageCodaRecords:manageCodaRecords:ERR:An exception occurred:[' + ex +'].')
    }
}

exports.manageCodaRecordsInit=()=>
{   try
    {  console.log('manageCodaRecords:manageCodaRecordsInit:INFO:in module manageCodaRecords')
    	 codaRecords=[]; 
    	 zndMsg.eventBus.on('newCodaRecord', function NCR(eventData) { createCodaRecord(eventData);})    	 
    	 zndMsg.eventBus.on('manageCodaRecords', function MCR(recordCount) { RECORDSCOUNT+=recordCount;})    	 
    } 
    catch(ex)
    {   console.log('manageCodaRecords:manageCodaRecordsInit:ERR:An exception occurred:[' + ex +'].')
    }
}

async function main(req, res)
{   try
    {   logger.trace(applicationName + ':zndLoadCodaFilesCntrl:main:Started');
        logger.trace(applicationName + ':zndLoadCodaFilesCntrl:main:Done');        
        res.render('zndLoadCodaFiles',{});
    }
    catch(ex)
    {   logger.exception(applicationName + ':zndLoadCodaFilesCntrl:main:An exception occured:[' + ex + '].')
    }
}
/* --------------------------------- End Functions   -------------------------*/

/* ----------------------------------Module Initialization -------------------*/
/* ----------------------------------End Module Initialization ---------------*/

/* ----------------------------------External functions ----------------------*/
module.exports.main                     = main
/* ----------------------------------End External functions ------------------*/


/* LOG:
*/

